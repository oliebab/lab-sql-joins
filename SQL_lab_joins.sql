USE sakila;

select * from film;
select * from category;
select * from film_category;

# 1 List the number of films per category.
SELECT 
    fc.category_id, 
    COUNT(f.film_id) AS number_of_films
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
GROUP BY fc.category_id
ORDER BY number_of_films DESC;

#2 Retrieve the store ID, city, and country for each store.

select * from store;
select * from city;
select * from country;


select 
	s.store_id, c.city, co.country
from store s 
join address a on s.address_id = a.address_id
join city c on c.city_id = a.city_id
join country co on co.country_id = c.country_id;

#3 Calculate the total revenue generated by each store in dollars.

select * from store;
select * from payment;
select * from rental;

-- payment & rental (customer_id) ; rental & staff (staff_id) ; staff & store (store_id)

select
	sto.store_id, sum(p.amount) as revenue
from payment p 
join rental r on r.customer_id = p.customer_id
join staff s on s.staff_id = r.staff_id
join store sto on sto.store_id = s.store_id
group by sto.store_id;

#4 Determine the average running time of films for each category.

-- category c & film_category fc (category_id) ; film_category fc & film f (film_id) > avg(length) group by category

select
	c.name, round(avg(f.length),0) as avg_running_time
from category c
join film_category fc on fc.category_id = c.category_id
join film f on fc.film_id = f.film_id
group by c.name;

#5 Identify the film categories with the longest average running time.

select
	c.name, round(avg(f.length),0) as avg_running_time
from category c
join film_category fc on fc.category_id = c.category_id
join film f on fc.film_id = f.film_id
group by c.name
order by avg_running_time desc;

#6 Display the top 10 most frequently rented movies in descending order.

select * from film;

select 
    f.title, COUNT(r.rental_id) as rental_count
from rental r
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
group by f.title
order by rental_count desc
limit 10;

#7 Determine if "Academy Dinosaur" can be rented from Store 1.

-- film & inventory (film_id) ; inventory & store (store_id)

select 
	f.title, f.film_id, s.store_id
from film f
join inventory i on i.film_id = f.film_id
join store s on s.store_id = i.store_id
where f.title = "ACADEMY DINOSAUR" and s.store_id = 1
limit 1;

#8 

SELECT 
    distinct(f.title),
    CASE 
        WHEN IFNULL(i.inventory_id, 0) = 0 THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
ORDER BY f.title ASC;





